/**
 * The **App Management REST API** allows user to manage apps in the system. This is only available for internal apps which are authorized for app management such as `Launcher` and `AppShop`.
 *
 * @apiClass App Management API
 * @apiVersion 1.00
 * @apiBasePath /api/v1
 */

var express    = require('express'),
    path       = require('path'),
    fs         = require('fs-extra'),
    uploader   = require('controllers/helper/upload'),
    permission = require('system/security/permission'),
    appmgr     = require('system/app/app-manager');

var router = express.Router();
var installers = [];

function getAppList(req, res, next) {
    var apps = appmgr.list();

    if (apps)
        res.json(apps);
    else
        res.sendStatus(500);
}

function getAppByID(req, res, next) {
    var app = appmgr.getManifest(req.params.appid);

    if (app)
        res.json(app);
    else
        res.status(404).send('App Not Found');
}

function getUploader() {
    return uploader(Infinity, 'application/zip',
        function onUploadStart(file, req, res) {
            var instid = file.name.split('.').shift();
            installers[instid] = file;
            installers[instid] = { status: 201, message: 'Upload start' };
            res.status(200).send(instid);
        },
        function onUploadComplete(file, req, res) {
            var instid = file.name.split('.').shift();
            if (file.truncated)
                installers[instid] = { status: 507, message: 'Insufficient storage' };
            else {
                installers[instid] = { status: 202, message: 'File received' };
                installers[instid] = appmgr.install(file.path);
            }

            fs.unlink(file.path);
        },
        function onUploadError(error, file) {
            var instid = file.name.split('.').shift();
            installers[instid] = { status: error.code, message: error.message };
        }
    );
}

function getInstallStatus(req, res, next) {
    if (!installers[req.params.instid])
        res.status(404).send('Installation ID Not Found');
    else
        res.status(installers[req.params.instid].status).send(installers[req.params.instid].message);
}

function removeApp(req, res, next) {
    var app = appmgr.getManifest(req.params.appid);
    var keepUserData = req.query.keepUserData == 1;

    if (app) {
        var result = appmgr.uninstall(app, keepUserData);
        res.status(result.status).send(result.message);
    }
    else
        res.status(404).send('App Not Found');
}

/**
 * Get app manifest list.
 *
 * @apiMethod GetAppList {GET} /apps
 *
 * @apiReturn 200 {Array} list Array of all app manifest objects.
 * @apiReturn 500 Unable to get app list.
 */
router.get('/', permission.grant, getAppList);

/**
 * Get app by ID. Returns app manifest object if app exists.
 *
 * App manifest is a JSON format document which looks like this:
 * ```
 * {
 *     "name": "HelloWorld",
 *     "version": "0.1.0",
 *     "api_version": 1,
 *     "directory": "hello",
 *     "entry": "index.html",
 *     "permission": {
 *         "apps": {
 *             "POST": "denied",
 *             "GET": "denied",
 *             "PUT": "denied",
 *             "DELETE": "denied"
 *         },
 *         "storage": {
 *             "POST": "denied",
 *             "GET": "denied",
 *             "PUT": "denied",
 *             "DELETE": "denied"
 *         },
 *         "fs": {
 *             "POST": "denied",
 *             "GET": "allow",
 *             "PUT": "denied",
 *             "DELETE": "denied"
 *         }
 *     },
 *     "locales": [
 *         "en_US",
 *         "zh_TW"
 *     ],
 *     "default_locale": "en_US",
 *     "browser_support": {
 *         "chrome": "*",
 *         "firefox": "*",
 *         "internet_explorer": "*",
 *         "safari": "*"
 *     },
 *     "description": "Hello world app.",
 *     "identifier": "IAeIjl3saB"
 * }
 * ```
 * where
 * - __api_version__: REST API version used in the app.
 * - __directory__: App directory name in file system.
 * - __entry__: App entry file loaded by browser.
 * - __permission__: Permission settings required by the app for REST API requests.
 * - __identifier__: App identifier generated by server build system. Beginning with 2 characters specifying the app type:
 *  - __IA__: `Internal App` is a type of built-in app build by system manufacturer.
 *  - __UA__: `User App` is a type of standalone app build by any app developer which can upload and install manually from `AppShop`.
 *  - __CA__: `Certified App` is a type of official app submitted on `AppShop Online Store`. __(NOT IMPLEMENTED)__
 *
 * @apiMethod GetAppByID {GET} /apps/`:appid`
 * @apiParam {String} appid App identifier.
 *
 * @apiReturn 200 {Object} manifest App manifest object.
 * @apiReturn 404 (App Not Found) App with `:appid` not found.
 */
router.get('/:appid', permission.grant, getAppByID);

/**
 * Upload and install app.
 *
 * @apiMethod Install {POST} /apps/install
 * @apiPostData {Object} formdata `FormData` object containing `File` object of app package.
 *
 * @apiReturn 200 {Number} instid `Installation ID` is returned for querying app installation status.
 * @apiReturn 4xx/5xx An error occurred while uploading app package.
 */
router.post('/install', permission.grant, getUploader());

/**
 * Get app installation status.
 *
 * @apiMethod GetInstallStatus {GET} /apps/install/`:instid`
 * @apiParam {Number} instid `Installation ID` returned from [Install API](#Install).
 *
 * @apiReturn 200 (Install OK)                         App install successfully.
 * @apiReturn 200 (Upgrade OK)                         App upgrade successfully.
 * @apiReturn 201 (App Upload Start)                   Starting to upload app package.
 * @apiReturn 202 (App Package Received)               App package is uploaded to server.
 * @apiReturn 404 (Installation ID Not Found)          App installation ID not found.
 * @apiReturn 404 (App Package Path Not Exist)         Missing uploaded app package.
 * @apiReturn 404 (Internal App Not Found For Upgrade) Internal app for upgrade is not found.
 * @apiReturn 415 (Bad MIME Type)                      MIME type of app package is not `'application/zip'`.
 * @apiReturn 415 (Extract App Package Failed)         An error occurred while extracting app package.
 * @apiReturn 415 (Bad App Package Content)            App directory tree or manifest format is not supported.
 * @apiReturn 500 (Load App Package Failed)            An error occurred while loading app package.
 * @apiReturn 501 (Certified App Not Supported)        Certified app is not supported.
 * @apiReturn 507 (Insufficient Storage)               No enough storage space for installing app packages.
 */
router.get('/install/:instid', permission.grant, getInstallStatus);

/**
 * Uninstall app by ID.
 *
 * @apiMethod Uninstall {DELETE} /apps/`:appid`
 * @apiParam {String} appid App identifier.
 *
 * @apiReturn 200 (Uninstall OK)                     Uninstall app successfully.
 * @apiReturn 403 (Uninstall Internal App Forbidden) Uninstall internal app is forbidden.
 * @apiReturn 404 (App Not Found)                    App with `:appid` is not found for uninstall.
 * @apiReturn 500 (App Path Not Found)               App path does not exist.
 */
router.delete('/:appid', permission.grant, removeApp);

module.exports = router;
